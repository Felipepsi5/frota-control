# Docker Compose - Frotacontrol
# Configuração unificada para desenvolvimento e produção

services:
  # JSON Server API
  api:
    image: node:20-alpine
    container_name: frotacontrol-api
    working_dir: /app
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      - ./data:/app/data:ro
      - ./config:/app/config:ro
    command: sh -c "npm install -g json-server@latest && json-server --watch /app/data/db.json --port 3000 --host 0.0.0.0"
    restart: unless-stopped
    networks:
      - frotacontrol-network
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend Angular (Desenvolvimento)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - NODE_ENV=${NODE_ENV:-development}
    container_name: frotacontrol-frontend
    ports:
      - "${FRONTEND_PORT:-4200}:4200"
    volumes:
      # Hot reload para desenvolvimento
      - ./src:/app/src
      - ./angular.json:/app/angular.json
      - ./tsconfig.app.json:/app/tsconfig.app.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.spec.json:/app/tsconfig.spec.json
      - ./proxy.conf.json:/app/proxy.conf.json
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    restart: unless-stopped
    networks:
      - frotacontrol-network
    depends_on:
      api:
        condition: service_healthy
    profiles:
      - dev

  # Aplicação com Nginx (Produção)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=${NODE_ENV:-production}
    container_name: frotacontrol-app
    ports:
      - "${APP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    restart: unless-stopped
    networks:
      - frotacontrol-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - prod

networks:
  frotacontrol-network:
    driver: bridge
    name: frotacontrol-network

# Comandos de uso:
# 
# Desenvolvimento (Frontend + API):
# docker-compose --profile dev up -d
#
# Produção (App + API):
# docker-compose --profile prod up -d
#
# Apenas API:
# docker-compose up api -d
#
# Com variáveis de ambiente:
# NODE_ENV=production docker-compose --profile prod up -d